/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: map-get($icon-home, 'width');
}

At the bottom of this section, we provide information about the spritesheet itself
*/
$ap-usa: (
  name: 'ap_usa',
  x: 0px,
  y: 0px,
  offset-x: 0px,
  offset-y: 0px,
  width: 16px,
  height: 16px,
  total-width: 128px,
  total-height: 24px,
  image: '../images/sprites.png'
);
$in-letter: (
  name: 'in_letter',
  x: 56px,
  y: 0px,
  offset-x: -56px,
  offset-y: 0px,
  width: 24px,
  height: 24px,
  total-width: 128px,
  total-height: 24px,
  image: '../images/sprites.png'
);
$in-lock: (
  name: 'in_lock',
  x: 80px,
  y: 0px,
  offset-x: -80px,
  offset-y: 0px,
  width: 24px,
  height: 24px,
  total-width: 128px,
  total-height: 24px,
  image: '../images/sprites.png'
);
$in-person: (
  name: 'in_person',
  x: 104px,
  y: 0px,
  offset-x: -104px,
  offset-y: 0px,
  width: 24px,
  height: 24px,
  total-width: 128px,
  total-height: 24px,
  image: '../images/sprites.png'
);
$ms-cart-hovered: (
  name: 'ms-cart-hovered',
  x: 16px,
  y: 0px,
  offset-x: -16px,
  offset-y: 0px,
  width: 20px,
  height: 20px,
  total-width: 128px,
  total-height: 24px,
  image: '../images/sprites.png'
);
$ms-cart: (
  name: 'ms-cart',
  x: 36px,
  y: 0px,
  offset-x: -36px,
  offset-y: 0px,
  width: 20px,
  height: 20px,
  total-width: 128px,
  total-height: 24px,
  image: '../images/sprites.png'
);
$spritesheet: (
  width: 128px,
  height: 24px,
  image: '../images/sprites.png',
  sprites: ($ap-usa, $in-letter, $in-lock, $in-person, $ms-cart-hovered, $ms-cart, )
);

/*
The provided mixins are intended to be used with variables directly

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: map-get($sprite, 'width');
}

@mixin sprite-height($sprite) {
  height: map-get($sprite, 'height');
}

@mixin sprite-position($sprite) {
  background-position: map-get($sprite, 'offset-x') map-get($sprite, 'offset-y');
}

@mixin sprite-image($sprite) {
  background-image: url(map-get($sprite, 'image'));
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites(map-get($spritesheet, 'sprites'));
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: map-get($sprite, 'name');
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
